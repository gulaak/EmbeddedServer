{"remainingRequest":"C:\\Users\\Gulaa\\Desktop\\EmbeddedServer\\client\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Gulaa\\Desktop\\EmbeddedServer\\client\\src\\App.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"C:\\Users\\Gulaa\\Desktop\\EmbeddedServer\\client\\src\\App.vue","mtime":1606853388575},{"path":"C:\\Users\\Gulaa\\Desktop\\EmbeddedServer\\client\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Gulaa\\Desktop\\EmbeddedServer\\client\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\Gulaa\\Desktop\\EmbeddedServer\\client\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\Gulaa\\Desktop\\EmbeddedServer\\client\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Gulaa\\Desktop\\EmbeddedServer\\client\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoNCiNhcHAgew0KICBtYXJnaW46IGF1dG87DQogIG1hcmdpbi10b3A6IDNyZW07DQogIG1heC13aWR0aDogNzAwcHg7DQp9DQouaWNvbiB7DQogIGN1cnNvcjogcG9pbnRlcjsNCn0NCg0KDQouZnJlZSB7DQogIGJhY2tncm91bmQtY29sb3I6IGdyZWVuOw0KICBjb2xvcjogYmxhY2s7DQp9DQouZmFpbCB7DQogIGNvbG9yOiByZWQ7DQp9DQouc3VjY2Vzc3sNCiAgY29sb3I6IGdyZWVuOw0KfQ0KLm9jY3VwaWVkIHsNCiAgYmFja2dyb3VuZC1jb2xvcjogcmVkOw0KICBjb2xvcjogYmxhY2s7DQp9DQoNCi51c2VkIHsNCiAgYmFja2dyb3VuZC1jb2xvcjogeWVsbG93Ow0KICBjb2xvcjogYmxhY2s7DQp9DQoNCnAgew0KICAgIHdoaXRlLXNwYWNlOiBwcmUtd3JhcDsNCn0NCg0KYnV0dG9uIHsNCiAgYmFja2dyb3VuZDogTm9uZTsNCn0NCg0KYi1yb3cgew0KICBwYWRkaW5nLXRvcDogMTBweDsNCiAgcGFkZGluZy1ib3R0b206IDEwcHg7DQp9DQoNCg0KDQoNCg0KDQoNCg=="},{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+SA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"App.vue","sourceRoot":"src","sourcesContent":["<template>\r\n  <div id=\"app\">\r\n\r\n\r\n    <b-form-file\r\n      v-model=\"file1\"\r\n      :state=\"Boolean(file1)\"\r\n      placeholder=\"Choose a file or drop it here...\"\r\n      drop-placeholder=\"Drop file here...\"\r\n    ></b-form-file>\r\n    <div class=\"mt-3\"> \r\n      <b-button @click=\"open_text=true\" variant=\"outline-primary\" > Manual Entry </b-button>\r\n      <b-button @click=\"file_send()\" variant=\"outline-primary\"> Submit </b-button>\r\n      <b-button @click=\"release_request()\" variant=\"outline-primary\"> Release </b-button>\r\n      <span > Compile Status : <span v-bind:class=\"{ fail : compileStatus=='Error' , success: compileStatus=='Success'}\" > {{compileStatus}} </span> </span>\r\n    </div>\r\n     <!-- <h1 v-for=\"(value, name ) in items\" v-bind:key=\"value\" >\r\n        {{ name }} : {{ value }}\r\n      </h1> -->\r\n\r\n    <vue-modaltor\r\n      :visible=\"open\"\r\n      @hide=\"open = false\">\r\n        <p>\r\n        {{ program_data }}\r\n        </p>\r\n    </vue-modaltor>\r\n\r\n    <vue-modaltor\r\n      :visible=\"open_text\"\r\n      @hide=\"open_text = false\">\r\n      <b-container>\r\n        <b-row>\r\n          <b-form-textarea\r\n            id=\"textarea\"\r\n            @keydown.tab.prevent=\"tabber($event)\"\r\n            v-model=\"modal_text\"\r\n            placeholder=\"Enter Python Program...\"\r\n            rows=\"15\"\r\n            max-rows=\"15\">\r\n          </b-form-textarea>\r\n        </b-row >\r\n        <b-row style=\"height:10px\">\r\n        </b-row>\r\n        <b-row>\r\n          <b-button variant=\"outline-primary\" @click=\"file_send_modal()\"> Submit! </b-button>\r\n        </b-row>\r\n      </b-container>\r\n    </vue-modaltor>\r\n\r\n\r\n\r\n    \r\n    <div class=\"mt-3\" v-for=\"(row,idx_row) of queue2D\" :key=\"row\">\r\n        <b-card-group deck>\r\n        <b-card class=\"text-center\" v-for=\"(column, idx_col) of row\" :key=\"column\">\r\n            <b-card-text > \r\n                Queue\r\n                  <button  @click=\"open = true ; moreInfo(idx_row * 3 + idx_col)\" style=\"border: None\">\r\n                    <b-icon icon=\"exclamation-circle-fill\" variant=\"info\" scale=\"1\"></b-icon>\r\n                  </button>\r\n                  <button @click=\"clearQueue(idx_row * 3 + idx_col)\" style=\"border: None\">\r\n                    <b-icon icon=\"x-circle\" scale=\"1\" variant=\"danger\"></b-icon>\r\n                  </button>\r\n\r\n            </b-card-text>\r\n        </b-card>\r\n        </b-card-group>\r\n    </div>\r\n\r\n      <div class=\"mt-3\" v-for=\"item of peripheral2D\" v-bind:key=\"item\">\r\n      <b-card-group deck>\r\n          <b-card class=\"text-center\" v-bind:class=\"{ occupied: column[1],  used: (column[2] > 0 && !column[1]) , free: column[2]==0  }\" v-for=\"column of item\" v-bind:key=\"column\"> \r\n              <b-card-text >{{ column[0]}} {{ column[2]}}</b-card-text>\r\n          </b-card> \r\n      </b-card-group>\r\n      </div>\r\n      <div class=\"mt-3\" >\r\n       <b-card-group deck>\r\n        <b-card class=\"text-center\" :class=\"{ occupied: (stats[0] > 50 && stats[0] <=100)}\"  v-for=\"stats of util\" :key=\"stats\">\r\n              <b-card-text> {{ stats[1] }}</b-card-text>\r\n              <b-card-text> {{ stats[0] }}</b-card-text>\r\n         </b-card>\r\n      </b-card-group>\r\n      </div>\r\n      <div class=\"mt-3\">\r\n      <b-card> \r\n        <b-card-text class=\"text-center\">Std Out </b-card-text>\r\n      </b-card>\r\n      <b-list-group>\r\n        <b-list-group-item v-for=\"entry of stdout_list\" v-bind:key=\"entry\"> <span style=\"color: blue\">[{{entry[1]}}]</span> <span style=\"width:1.5em\"> </span>  {{entry[0]}}</b-list-group-item>\r\n      </b-list-group>\r\n      </div>\r\n\r\n     \r\n  \r\n  </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport io from \"socket.io-client\"\r\n\r\nexport default {\r\n  name: \"App\",\r\n  data() {\r\n    return {\r\n      file1:\"\",\r\n      description: \"\",\r\n      editedDescription: \"\",\r\n      selected: {},\r\n      socket: \"\",\r\n      compileStatus: \"\",\r\n      peripheral2D: \"\",\r\n      stdout_list: [],\r\n      status: {}, \r\n      queue: [],\r\n      queue2D: \"\",\r\n      program_data:\"\",\r\n      open: false,\r\n      modal_text: \"\",\r\n      open_text: false,\r\n      util: []\r\n    };\r\n  },\r\n\r\n\r\n  mounted(){\r\n    //this.socket = io.connect(\"http://28508f90dbe1.ngrok.io\")\r\n    this.socket = io.connect('http://localhost:5000')\r\n    this.socket.on(\"peripheral status\", (data) => { // update all the peripheral statuses \r\n      //console.log(\"In status\")\r\n      //console.log(data)  \r\n      this.peripheral2D = this.convertObjectTo2D(data,3);\r\n    });\r\n\r\n    this.socket.on(\"queue add\", (data) =>{\r\n      this.queue.push(data);\r\n      //console.log(data)\r\n      this.queue2D = this.convertTo2D(this.queue,3);\r\n    });\r\n\r\n    this.socket.on(\"cpu stats\", (data) => { // update all the peripheral statuses \r\n      var temp = []\r\n      for(var i = 0 ; i < 4 ; ++i){ // loop over all data ( cpu util , available memory, used memory, percentage memory used)\r\n        switch(i){\r\n          case 0: temp[i] = [data[i],\"CPU\"]; break;\r\n          case 1: temp[i] = [data[i],\"Avail\"]; break;\r\n          case 2: temp[i] = [data[i-1] - data[i],\"Used\"]; break;\r\n          default: temp[i] = [data[i],\"Perc\"]; break;\r\n        }\r\n        \r\n      }\r\n      this.util = temp \r\n    });\r\n\r\n\r\n    this.socket.on(\"update text\", (data)=>{\r\n      this.compileStatus= \"Success\"\r\n      var time_obj = new Date()\r\n      var timestamp = time_obj.getHours() + \":\" + time_obj.getMinutes() + \":\" + time_obj.getSeconds()\r\n      this.stdout_list.push([data, timestamp])\r\n      if ( this.stdout_list.length > 6){      \r\n        this.stdout_list.shift();\r\n      }\r\n    })\r\n    this.socket.on(\"compile success\", ()=>{this.compileStatus = \"Success\"});\r\n\r\n    this.socket.on(\"compile error\", (data)=>{\r\n      this.compileStatus = \"Error\";\r\n      var time_obj = new Date()\r\n      var timestamp = time_obj.getHours() + \":\" + time_obj.getMinutes() + \":\" + time_obj.getSeconds()\r\n      this.stdout_list.push([data, timestamp])\r\n\r\n    });\r\n\r\n    this.socket.on(\"dispatch queue\", (program_string) => {\r\n      //console.log(\"dispatched\")\r\n      for ( let [idx, item] of this.queue.entries()){\r\n        if(item[\"program\"] === program_string){\r\n          this.queue.splice(idx,1);\r\n          break;\r\n        }\r\n      }\r\n      this.queue2D = this.convertTo2D(this.queue,3); // render to UIÃŸ\r\n    });\r\n\r\n\r\n\r\n    //this.peripheral2D = this.convertObjectTo2D(this.items,3);\r\n  },\r\n\r\n\r\n  methods: {\r\n\r\n    file_send(){\r\n      //var file = document.getElementById(\"fileForUpload\").files[0]\r\n      //console.log(file)\r\n      if(this.file1){\r\n        var reader = new FileReader();\r\n        reader.readAsText(this.file1,\"UTF-8\");\r\n        var socket = this.socket\r\n        reader.onload = function(evt){\r\n          //console.log(evt.target.result)\r\n          //console.log(socket)\r\n          //for(var i = 0; i < 100; ++i){\r\n            socket.emit('file message', evt.target.result, socket.id); // send socket ID to track which client sent a file.\r\n          ///}\r\n        }\r\n      }\r\n      \r\n    },\r\n\r\n    tabber (event) {\r\n        let text = this.modal_text,\r\n          originalSelectionStart = event.target.selectionStart,\r\n          textStart = text.slice(0, originalSelectionStart),\r\n          textEnd =  text.slice(originalSelectionStart);\r\n\r\n        this.modal_text = `${textStart}\\t${textEnd}`\r\n        event.target.value = this.modal_text // required to make the cursor stay in place.\r\n        event.target.selectionEnd = event.target.selectionStart = originalSelectionStart + 1\r\n    },\r\n\r\n    moreInfo(idx){\r\n      //console.log(\"Index: \" + idx)\r\n      this.program_data = this.queue[idx][\"program\"]\r\n    },\r\n\r\n\r\n    file_send_modal(){\r\n      //for(var i = 0; i < 100 ; ++i){\r\n        this.socket.emit('file message', this.modal_text, this.socket.id); // send program from modal to backend to program\r\n      //}\r\n      this.open_text = false\r\n    },\r\n\r\n    release_request(){\r\n      this.socket.emit('release', this.socket.id); // release any resources I am holding. \r\n    },\r\n\r\n    clearQueue(id){\r\n      //console.log(\"Clear Queue\")\r\n      let queue_obj = this.queue[id]\r\n      this.queue.splice(id,1)\r\n      this.queue2D = this.convertTo2D(this.queue,3);\r\n      //console.log(this.queue2D)\r\n      this.socket.emit('clear queue', queue_obj);\r\n      \r\n    },\r\n\r\n    handleResponse(data){\r\n      this.status = data; // data is an object that \r\n    },\r\n\r\n    convertTo2D(array,numOfRows){\r\n      var temp = []\r\n      var j = 0\r\n      for( var i = 0 ; i < array.length ; ++i){\r\n        if (i % numOfRows == 0){\r\n          temp.push( [] )\r\n          if( i != 0){\r\n            j+=1\r\n          }\r\n          temp[j].push(array[i])\r\n        } else{\r\n          temp[j].push(array[i])\r\n        }\r\n      }\r\n      //console.log(temp)\r\n      return temp\r\n    },\r\n\r\n    convertObjectTo2D(object,numOfRows){ // break an object into a 2D array to display in UI grid \r\n      var i = 0;\r\n      var j = 0;\r\n      var temp = []\r\n      \r\n      //console.log(object)\r\n      for( const key in object){\r\n        if (key == \"_id\" || key == \"__v\") continue; \r\n        //console.log(key)\r\n        if ( i % (numOfRows) == 0){\r\n          temp.push([])\r\n          if (i != 0){\r\n            j +=1\r\n          }\r\n          temp[j].push([key,object[key][0],object[key][1]]);\r\n          \r\n        } else{\r\n          temp[j].push([key,object[key][0],object[key][1]]);\r\n        }\r\n        ++i;\r\n      }\r\n     //console.log(temp);\r\n     return temp;\r\n    }\r\n\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n#app {\r\n  margin: auto;\r\n  margin-top: 3rem;\r\n  max-width: 700px;\r\n}\r\n.icon {\r\n  cursor: pointer;\r\n}\r\n\r\n\r\n.free {\r\n  background-color: green;\r\n  color: black;\r\n}\r\n.fail {\r\n  color: red;\r\n}\r\n.success{\r\n  color: green;\r\n}\r\n.occupied {\r\n  background-color: red;\r\n  color: black;\r\n}\r\n\r\n.used {\r\n  background-color: yellow;\r\n  color: black;\r\n}\r\n\r\np {\r\n    white-space: pre-wrap;\r\n}\r\n\r\nbutton {\r\n  background: None;\r\n}\r\n\r\nb-row {\r\n  padding-top: 10px;\r\n  padding-bottom: 10px;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n</style>\r\n"]}]}